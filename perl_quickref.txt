# Quick Ref

# special variables
+------------------------+---------------------------------------------+
| Special Variable       | Description and Example                     |
+------------------------+---------------------------------------------+
| `$_`                   | Default variable for many functions and     |
|                        | operations. Often used in loops and regex.  |
|                        |                                             |
|                        | foreach (@array) {                          |
|                        |     print "$_\n";                           |
|                        | }                                           |
+------------------------+---------------------------------------------+
| `@_`                   | Array containing parameters passed to a     |
|                        | subroutine.                                 |
|                        |                                             |
|                        | sub sub_name {                              |
|                        |     my ($param1, $param2) = @_;             |
|                        |     print "$param1, $param2\n";             |
|                        | }                                           |
+------------------------+---------------------------------------------+
| `$!`                   | Error message corresponding to the current  |
|                        | value of the system error variable.         |
|                        |                                             |
|                        | open my $fh, '<', 'file.txt' or die $!;     |
+------------------------+---------------------------------------------+
| `$?`                   | Status code returned by the last `system`   |
|                        | or `backticks` operation.                   |
|                        |                                             |
|                        | system('ls');                               |
|                        | print "Status: $?\n";                       |
+------------------------+---------------------------------------------+
| `$0`                   | The name of the script being executed.      |
|                        |                                             |
|                        | print "Script name: $0\n";                  |
+------------------------+---------------------------------------------+
| `$$`                   | The process ID (PID) of the current script. |
|                        |                                             |
|                        | print "PID: $$\n";                          |
+------------------------+---------------------------------------------+
| `@ARGV`                | Array containing command-line arguments     |
|                        | passed to the script.                       |
|                        |                                             |
|                        | foreach my $arg (@ARGV) {                   |
|                        |     print "$arg\n";                         |
|                        | }                                           |
+------------------------+---------------------------------------------+
| `%ENV`                 | Hash containing the current environment     |
|                        | variables.                                  |
|                        |                                             |
|                        | print "PATH: $ENV{PATH}\n";                 |
+------------------------+---------------------------------------------+
| `$!`                   | The system error message for the last       |
|                        | unsuccessful system call.                   |
|                        |                                             |
|                        | open(my $fh, '<', 'file.txt') or die "Error:|
|                        | $!\n";                                      |
+------------------------+---------------------------------------------+
| `@INC`                 | Array containing the list of directories    |
|                        | Perl will search for modules.               |
|                        |                                             |
|                        | foreach my $dir (@INC) {                    |
|                        |     print "$dir\n";                         |
|                        | }                                           |
+------------------------+---------------------------------------------+
| `$.`                   | Current line number for the last filehandle |
|                        | accessed.                                   |
|                        |                                             |
|                        | while (<FILE>) {                            |
|                        |     print "$. $_";                          |
|                        | }                                           |
+------------------------+---------------------------------------------+
| `$^O`                  | The name of the operating system Perl was   |
|                        | built on.                                   |
|                        |                                             |
|                        | print "OS: $^O\n";                          |
+------------------------+---------------------------------------------+
| `$|`                   | If set to non-zero, forces a flush after    |
|                        | every write or print on the currently       |
|                        | selected output channel.                    |
|                        |                                             |
|                        | $| = 1;                                     |
|                        | print "Immediate flush\n";                  |
+------------------------+---------------------------------------------+

###########################################################################
# variables
+------------------+-------------------------+----------------------------+
| Variable Type    | Example                 | Description                |
+------------------+-------------------------+----------------------------+
| Scalar           | my $scalar = 'text';    | Single value               |
|                  | my $number = 42;        | (string, number)           |
+------------------+-------------------------+----------------------------+
| Array            | my @array = ('a', 'b'); | List of values             |
|                  | my $elem = $array[0];   | Access elements            |
+------------------+-------------------------+----------------------------+
| Hash             | my %hash = ('k' => 'v');| Key-value pairs            |
|                  | my $val = $hash{'k'};   | Access values              |
+------------------+-------------------------+----------------------------+
| Context          | my $count = @array;     | Scalar context             |
|                  | my @keys = keys %hash;  | List context               |
+------------------+-------------------------+----------------------------+
| Special Vars     | while (<STDIN>) {       | Default var $_             |
|                  |   print if /pattern/;   |                            |
|                  | }                       |                            |
+------------------+-------------------------+----------------------------+
| Interpolation    | my $name = 'Alice';     | Scalars & arrays in        |
|                  | print "Hi, $name\n";    | double quotes              |
|                  | print "@array\n";       | Hash values need braces    |
|                  | print "$hash{'k'}\n";   |                            |
+------------------+-------------------------+----------------------------+
| Global Variables | our $global_var = 5;    | Accessible anywhere        |
|                  | @global_array = (1,2);  |                            |
+------------------+-------------------------+----------------------------+
| Lexical Variables| sub example {           | Scoped to block            |
|                  |   my $local_var = 'x';  |                            |
|                  | }                       |                            |
+------------------+-------------------------+----------------------------+
| Special Vars     | my $size = scalar       | Size of array              |
|                  | @array;                 |                            |
|                  | my $keys = scalar       | Size of hash               |
|                  | keys %hash;             |                            |
+------------------+-------------------------+----------------------------+

###########################################################################
# loop constructs
+------------------------+---------------------------------------------+
| Loop Construct         | Example                                     |
+------------------------+---------------------------------------------+
| `foreach` Loop         | Iterates over each element in an array or a |
|                        | list.                                       |
|                        |                                             |
|                        | foreach my $item (@arr) {                   |
|                        |     print "$item\n";                        |
|                        | }                                           |
|                        |                                             |
|                        | foreach (@arr)                              |
|                        | {                                           |
|                        |   say $_;                                   |
|                        | }                                           |
|                        |                                             |
+------------------------+---------------------------------------------+
| `for` Loop             | Traditional C-style for loop, with          |
|                        | initialization, condition, and increment.   |
|                        |                                             |
|                        | for (my $i = 0; $i < 10; $i++) {            |
|                        |     print "$i\n";                           |
|                        | }                                           |
|                        |                                             |
+------------------------+---------------------------------------------+
| `for` Loop with Range  | Iterate over a range of numbers.            |
|                        |                                             |
|                        | for my $i (0..9) {                          |
|                        |     print "$i\n";                           |
|                        | }                                           |
|                        |                                             |
+------------------------+---------------------------------------------+
| `while` Loop           | Executes as long as the condition is true.  |
|                        |                                             |
|                        | my $count = 0;                              |
|                        | while ($count < 5) {                        |
|                        |     print "$count\n";                       |
|                        |     $count++;                               |
|                        | }                                           |
|                        |                                             |
+------------------------+---------------------------------------------+
| `until` Loop           | Executes until the condition becomes true   |
|                        | (opposite of while).                        |
|                        |                                             |
|                        | my $count = 0;                              |
|                        | until ($count >= 5) {                       |
|                        |     print "$count\n";                       |
|                        |     $count++;                               |
|                        | }                                           |
|                        |                                             |
+------------------------+---------------------------------------------+
| `do-while` Loop        | Executes the block at least once before     |
|                        | checking the condition.                     |
|                        |                                             |
|                        | my $count = 0;                              |
|                        | do {                                        |
|                        |     print "$count\n";                       |
|                        |     $count++;                               |
|                        | } while ($count < 5);                       |
|                        |                                             |
+------------------------+---------------------------------------------+
| `do-until` Loop        | Executes the block at least once before     |
|                        | checking the condition (opposite of         |
|                        | do-while).                                  |
|                        |                                             |
|                        | my $count = 0;                              |
|                        | do {                                        |
|                        |     print "$count\n";                       |
|                        |     $count++;                               |
|                        | } until ($count >= 5);                      |
|                        |                                             |
+------------------------+---------------------------------------------+
| `map` Function         | Transforms a list by applying a block of    |
|                        | code to each element.                       |
|                        |                                             |
|                        | my @squared = map { $_ * $_ } (1..10);      |
|                        | print "@squared\n";                         |
|                        |                                             |
+------------------------+---------------------------------------------+
| `grep` Function        | Filters a list by applying a block of code  |
|                        | to each element.                            |
|                        |                                             |
|                        | my @evens = grep { $_ % 2 == 0 } (1..10);   |
|                        | print "@evens\n";                           |
|                        |                                             |
+------------------------+---------------------------------------------+
| Labelled Loops         | Provides a way to label loops and control   |
|                        | flow using labels.                          |
|                        |                                             |
|                        | LOOP: while (condition) {                   |
|                        |     last LOOP if (condition2);              |
|                        |     # Code                                  |
|                        | }                                           |
|                        |                                             |
+------------------------+---------------------------------------------+
| Nested Loops with      | Controls loop execution in nested loops     |
| Control Statements     | using labels.                               |
|                        |                                             |
|                        | OUTER: for my $i (0..2) {                   |
|                        |     INNER: for my $j (0..2) {               |
|                        |         last OUTER if ($i + $j > 2);        |
|                        |         print "$i, $j\n";                   |
|                        |     }                                       |
|                        | }                                           |
|                        |                                             |
+------------------------+---------------------------------------------+
| Loop Control Statements| Controls loop execution. `last` exits the   |
|                        | loop, `next` skips to the next iteration,   |
|                        | and `redo` restarts the loop block.         |
|                        |                                             |
|                        | foreach my $item (@array) {                 |
|                        |     next if $item eq 'skip';                |
|                        |     last if $item eq 'stop';                |
|                        |     print "$item\n";                        |
|                        | }                                           |
|                        |                                             |
+------------------------+---------------------------------------------+
| Loop in Regular        | Uses loop-like constructs within regex      |
| Expressions            | matching.                                   |
|                        |                                             |
|                        | my $string = "abcabcabc";                   |
|                        | while ($string =~ /a(b)/g) {                |
|                        |     print "$1\n";                           |
|                        | }                                           |
|                        |                                             |
+------------------------+---------------------------------------------+
###########################################################################

# subroutines
+------------------------+---------------------------------------------+
| Subroutine Concept     | Example                                     |
+------------------------+---------------------------------------------+
| Basic Subroutine       | Defines a subroutine and how to call it.    |
|                        |                                             |
|                        | sub sub_name {                              |
|                        |     # Code                                  |
|                        | }                                           |
|                        |                                             |
|                        | sub_name();                                 |
+------------------------+---------------------------------------------+
| Subroutine with Params | Passes parameters to a subroutine.          |
|                        |                                             |
|                        | sub sub_name {                              |
|                        |     my ($param1, $param2) = @_;             |
|                        |     print "$param1, $param2\n";             |
|                        | }                                           |
|                        |                                             |
|                        | sub_name('Hello', 'World');                 |
+------------------------+---------------------------------------------+
| Return Values          | Returns values from a subroutine.           |
|                        |                                             |
|                        | sub add {                                   |
|                        |     my ($a, $b) = @_;                       |
|                        |     return $a + $b;                         |
|                        | }                                           |
|                        |                                             |
|                        | my $sum = add(2, 3);                        |
|                        | print "$sum\n";                             |
+------------------------+---------------------------------------------+
| Private Variables      | Uses lexical variables for private scope.   |
|                        |                                             |
|                        | sub sub_name {                              |
|                        |     my $var = 'local';                      |
|                        |     # Code                                  |
|                        | }                                           |
|                        |                                             |
|                        | sub_name();                                 |
+------------------------+---------------------------------------------+
| Global Variables       | Uses global variables with `our` keyword.   |
|                        |                                             |
|                        | our $var = 'global';                        |
|                        |                                             |
|                        | sub sub_name {                              |
|                        |     print "$var\n";                         |
|                        | }                                           |
|                        |                                             |
|                        | sub_name();                                 |
+------------------------+---------------------------------------------+
| Context Sensitivity    | Handles scalar and list contexts.           |
|                        |                                             |
|                        | sub context_test {                          |
|                        |     return wantarray ? (1, 2, 3) : 'scalar';|
|                        | }                                           |
|                        |                                             |
|                        | my @list = context_test();                  |
|                        | my $scalar = context_test();                |
+------------------------+---------------------------------------------+
| Subroutine References  | References and dereferences a subroutine.   |
|                        |                                             |
|                        | my $sub_ref = \&sub_name;                   |
|                        |                                             |
|                        | &$sub_ref();                                |
|                        | # or                                        |
|                        | $sub_ref->();                               |
+------------------------+---------------------------------------------+
| Anonymous Subroutines  | Creates and uses anonymous subroutines.     |
|                        |                                             |
|                        | my $anon_sub = sub {                        |
|                        |     print "Hello from anon sub\n";          |
|                        | };                                          |
|                        |                                             |
|                        | $anon_sub->();                              |
+------------------------+---------------------------------------------+

###########################################################################
# comparison
+-------------------------+--------------------------------------------+
| Operator                | Example and Description                    |
+-------------------------+--------------------------------------------+
| `==`                    | Numeric equality.                          |
|                         | `$a == $b`                                 |
+-------------------------+--------------------------------------------+
| `!=`                    | Numeric inequality.                        |
|                         | `$a != $b`                                 |
+-------------------------+--------------------------------------------+
| `<`                     | Numeric less than.                         |
|                         | `$a < $b`                                  |
+-------------------------+--------------------------------------------+
| `<=`                    | Numeric less than or equal to.             |
|                         | `$a <= $b`                                 |
+-------------------------+--------------------------------------------+
| `>`                     | Numeric greater than.                      |
|                         | `$a > $b`                                  |
+-------------------------+--------------------------------------------+
| `>=`                    | Numeric greater than or equal to.          |
|                         | `$a >= $b`                                 |
+-------------------------+--------------------------------------------+
| `<=>`                   | Numeric comparison, returns -1, 0, or 1.   |
|                         | `my $result = $a <=> $b;`                  |
|                         | `print "Result: $result\n";`               |
+-------------------------+--------------------------------------------+
| `eq`                    | String equality.                           |
|                         | `$a eq $b`                                 |
+-------------------------+--------------------------------------------+
| `ne`                    | String inequality.                         |
|                         | `$a ne $b`                                 |
+-------------------------+--------------------------------------------+
| `lt`                    | String less than.                          |
|                         | `$a lt $b`                                 |
+-------------------------+--------------------------------------------+
| `le`                    | String less than or equal to.              |
|                         | `$a le $b`                                 |
+-------------------------+--------------------------------------------+
| `gt`                    | String greater than.                       |
|                         | `$a gt $b`                                 |
+-------------------------+--------------------------------------------+
| `ge`                    | String greater than or equal to.           |
|                         | `$a ge $b`                                 |
+-------------------------+--------------------------------------------+
| `cmp`                   | String comparison, returns -1, 0, or 1.    |
|                         | `my $result = $a cmp $b;`                  |
|                         | `print "Result: $result\n";`               |
+-------------------------+--------------------------------------------+

###########################################################################

# arrays and lists 
+--------------------------+--------------------------------------------+
| Concept                  | Example and Description                    |
+--------------------------+--------------------------------------------+
| Declaring Arrays         | Use `@` to declare an array.               |
|                          |                                            |
|                          | my @fruits = ('apple', 'banana', 'cherry');|
|                          | my @empty_array = ();                      |
+--------------------------+--------------------------------------------+
| Accessing Elements       | Use `$` with index to access elements.     |
|                          |                                            |
|                          | my $first = $fruits[0];  # 'apple'         |
|                          | my $last  = $fruits[-1]; # 'cherry'        |
+--------------------------+--------------------------------------------+
| Assigning Elements       | Directly assign to specific indices.       |
|                          |                                            |
|                          | $fruits[0] = 'pear';                       |
|                          | $fruits[-1] = 'grape';                     |
+--------------------------+--------------------------------------------+
| Array Length             | Use `scalar @array` to get array length.   |
|                          |                                            |
|                          | my $length = scalar @fruits;               |
|                          | # Length: 3                                |
+--------------------------+--------------------------------------------+
| Adding Elements          | Use `push` and `unshift` to add elements.  |
|                          |                                            |
|                          | push(@fruits, 'kiwi');     # Add to end    |
|                          | unshift(@fruits, 'mango'); # Add to start  |
|                          |                                            |
|                          | # @fruits now ('mango', 'pear', 'banana',  |
|                          | 'grape', 'kiwi')                           |
+--------------------------+--------------------------------------------+
| Removing Elements        | Use `pop` and `shift` to remove elements.  |
|                          |                                            |
|                          | my $last_fruit  = pop(@fruits);            |
|                          |                   # Remove last            |
|                          |                                            |
|                          | my $first_fruit = shift(@fruits);          |
|                          |                   # Remove first           |
|                          |                                            |
|                          | # $last_fruit is 'kiwi'                    |
|                          | # $first_fruit is 'mango'                  |
|                          | # @fruits now   ('pear', 'banana', 'grape')|
+--------------------------+--------------------------------------------+
| Slicing Arrays           | Use `@array[start..end]` to slice arrays.  |
|                          |                                            |
|                          | my @fruits = ('apple', 'banana', 'cherry', |
|                          |                                  'date');  |
|                          |                                            |
|                          | my @slice = @fruits[1..2];                 |
|                          | # @slice is ('banana', 'cherry')           |
|                          |                                            |
|                          | # Slice with negative indices              |
|                          | my @reverse_slice = @fruits[-3..-1];       |
|                          | # @reverse_slice is ('banana', 'cherry'    |
|                          |                                'date')     |
|                          |                                            |
+--------------------------+--------------------------------------------+
| Splicing Arrays          | Use `splice` to remove/replace array parts.|
|                          |                                            |
|                          | my @fruits = ('apple', 'banana', 'cherry', |
|                          |                                  'date');  |
|                          | my @removed = splice(@fruits, 1, 2);       |
|                          | # @removed is ('banana', 'cherry')         |
|                          | # @fruits is ('apple', 'date')             |
|                          |                                            |
|                          | # Splice with replacement                  |
|                          | splice(@fruits, 1, 1, 'plum');             |
|                          | # @fruits is ('apple', 'plum', 'date')     |
|                          |                                            |
|                          | # Splice to insert without removing        |
|                          | splice(@fruits, 2, 0, 'kiwi');             |
|                          | # @fruits is ('apple', 'plum', 'kiwi',     |
|                          |                                'date')     |
|                          |                                            |
|                          | # Splice to remove without replacement     |
|                          | splice(@fruits, 1, 2);                     |
|                          | # @fruits is ('apple', 'date')             |
+--------------------------+--------------------------------------------+
| Iterating Arrays         | Use `foreach` or `for` to iterate.         |
|                          |                                            |
|                          | foreach my $fruit (@fruits) {              |
|                          |     print "$fruit\n";                      |
|                          | }                                          |
|                          |                                            |
|                          | for my $i (0..$#fruits) {                  |
|                          |     print "$fruits[$i]\n";                 |
|                          | }                                          |
+--------------------------+--------------------------------------------+
| Map Function             | Use `map` to transform arrays.             |
|                          |                                            |
|                          | my @upper_fruits = map { uc $_ } @fruits;  |
|                          | # @upper_fruits is ('APPLE', 'BANANA',     |
|                          |                     'CHERRY')              |
+--------------------------+--------------------------------------------+
| Grep Function            | Use `grep` to filter arrays.               |
|                          |                                            |
|                          | my @a_fruits = grep { /^a/ } @fruits;      |
|                          | # @a_fruits is ('apple')                   |
+--------------------------+--------------------------------------------+
| Joining Arrays           | Use `join` to combine array elements into  |
|                          | a string.                                  |
|                          |                                            |
|                          | my @fruits = ('apple', 'banana', 'cherry');|
|                          | my $fruit_str = join(", ", @fruits);       |
|                          | # 'apple, banana, cherry'                  |
|                          |                                            |
|                          | # Join with different separator            |
|                          | my $path = join("/", 'home', 'user',       |
|                          |                      'docs');              |
|                          | # 'home/user/docs'                         |
+--------------------------+--------------------------------------------+
| Splitting Strings        | Use `split` to divide strings into arrays. |
|                          |                                            |
|                          | my $str = "apple,banana,cherry";           |
|                          | my @fruits = split(",", $str);             |
|                          | # ('apple', 'banana', 'cherry')            |
|                          |                                            |
|                          | # Split with regex                         |
|                          | my $data = "one-two-three";                |
|                          | my @words = split(/-/, $data);             |
|                          | # ('one', 'two', 'three')                  |
|                          |                                            |
|                          | # Split into characters                    |
|                          | my $word = "Perl";                         |
|                          | my @letters = split("", $word);            |
|                          | # ('P', 'e', 'r', 'l')                     |
+--------------------------+--------------------------------------------+
| Sorting Arrays           | Use `sort` to sort arrays.                 |
|                          |                                            |
|                          | my @sorted_fruits = sort @fruits;          |
|                          | # ('apple', 'banana', 'cherry')            |
|                          |                                            |
|                          | my @num_sorted = sort { $a <=> $b } (4, 2, |
|                          |                                      8);   |
|                          | # (2, 4, 8)                                |
|                          |                                            |
+--------------------------+--------------------------------------------+
| Array References         | Use `\@array` to create array references.  |
|                          |                                            |
|                          | my @fruits = ('apple', 'banana', 'cherry');|
|                          | my $fruits_ref = \@fruits;                 |
|                          | print $fruits_ref->[0]; # 'apple'          |
+--------------------------+--------------------------------------------+
| Dereferencing Arrays     | Use `@$array_ref` to dereference arrays.   |
|                          |                                            |
|                          | my @dereferenced = @$fruits_ref;           |
|                          | # @dereferenced is ('apple', 'banana',     |
|                          |                     'cherry')              |
+--------------------------+--------------------------------------------+
| Multidimensional Arrays  | Use array references to create             |
|                          | multidimensional arrays.                   |
|                          |                                            |
|                          | my @matrix = ([1, 2], [3, 4]);             |
|                          | print $matrix[0][1];  # 2                  |
|                          |                                            |
|                          | # Accessing elements in a 2D array         |
|                          | for my $row (@matrix) {                    |
|                          |     for my $col (@$row) {                  |
|                          |         print "$col ";                     |
|                          |     }                                      |
|                          |     print "\n";                            |
|                          | }                                          |
+--------------------------+--------------------------------------------+

###########################################################################

# hashes
+--------------------------+--------------------------------------------+
| Concept                  | Example and Description                    |
+--------------------------+--------------------------------------------+
| Declaring Hashes         | Use `%` to declare a hash.                 |
|                          |                                            |
|                          | my %fruit_colors = (                       |
|                          |     apple  => 'red',                       |
|                          |     banana => 'yellow',                    |
|                          |     grape  => 'purple'                     |
|                          | );                                         |
+--------------------------+--------------------------------------------+
| Accessing Values         | Use `$` with key to access values.         |
|                          |                                            |
|                          | my $apple_color = $fruit_colors{apple};    |
|                          | # 'red'                                    |
+--------------------------+--------------------------------------------+
| Assigning Values         | Directly assign to specific keys.          |
|                          |                                            |
|                          | $fruit_colors{banana} = 'green';           |
|                          | $fruit_colors{orange} = 'orange';          |
+--------------------------+--------------------------------------------+
| Checking Existence       | Use `exists` to check if a key exists.     |
|                          |                                            |
|                          | if (exists $fruit_colors{apple}) {         |
|                          |     print "Apple exists\n";                |
|                          | }                                          |
+--------------------------+--------------------------------------------+
| Deleting Keys            | Use `delete` to remove key-value pairs.    |
|                          |                                            |
|                          | delete $fruit_colors{grape};               |
|                          | # %fruit_colors is now                     |
|                          | # (apple => 'red',                         |
|                          | #  banana => 'green',                      |
|                          | #  orange => 'orange')                     |
+--------------------------+--------------------------------------------+
| Iterating Hashes         | Use `foreach` to iterate over keys or      |
|                          | values.                                    |
|                          |                                            |
|                          | foreach my $fruit (keys %fruit_colors) {   |
|                          |   print "$fruit: $fruit_colors{$fruit}\n"; |
|                          | }                                          |
|                          |                                            |
|                          | foreach my $color (values %fruit_colors) { |
|                          |   print "$color\n";                        |
|                          | }                                          |
+--------------------------+--------------------------------------------+
| Hash Slices              | Use `@hash{keys}` to get multiple values.  |
|                          |                                            |
|                          | my @selected_colors =                      |
|                          |     @fruit_colors{'apple', 'banana'};      |
|                          | # @selected_colors is ('red', 'green')     |
+--------------------------+--------------------------------------------+
| Converting Hash to Array | Use `@hash` to convert hash to array.      |
|                          |                                            |
|                          | my @array = %fruit_colors;                 |
|                          | # @array is ('apple', 'red', 'banana',     |
|                          | #  'green', 'orange', 'orange')            |
+--------------------------+--------------------------------------------+
| Converting Array to Hash | Use `%array` to convert array to hash.     |
|                          |                                            |
|                          | my @array = ('apple', 'red', 'banana',     |
|                          | # 'yellow');                               |
|                          | my %hash = @array;                         |
|                          | # %hash is (apple => 'red',                |
|                          | #  banana => 'yellow')                     |
+--------------------------+--------------------------------------------+
| Hash of Hashes           | Use nested hashes for complex structures.  |
|                          |                                            |
|                          | my %fruit_info = (                         |
|                          |     apple  => {                            |
|                          |         color => 'red',                    |
|                          |         taste => 'sweet'                   |
|                          |     },                                     |
|                          |     banana => {                            |
|                          |         color => 'yellow',                 |
|                          |         taste => 'sweet'                   |
|                          |     }                                      |
|                          | );                                         |
|                          |                                            |
|                          | print $fruit_info{apple}{color};           |
|                          | # 'red'                                    |
+--------------------------+--------------------------------------------+
| Hash References          | Use `\%hash` to create hash references.    |
|                          |                                            |
|                          | my $fruit_colors_ref = \%fruit_colors;     |
|                          | print $fruit_colors_ref->{apple};          |
|                          | # 'red'                                    |
+--------------------------+--------------------------------------------+
| Dereferencing Hashes     | Use `%$hash_ref` to dereference hashes.    |
|                          |                                            |
|                          | my %dereferenced = %$fruit_colors_ref;     |
|                          | # %dereferenced is (apple => 'red',        |
|                          | #  banana => 'green',                      |
|                          | #  orange => 'orange')                     |
+--------------------------+--------------------------------------------+

###########################################################################

# regex regular expressions
+------------------------+---------------------------------------------+
| Concept                | Example and Description                     |
+------------------------+---------------------------------------------+
| Matching               | Use `=~` to match patterns in a string.     |
|                        |                                             |
|                        | my $str = "hello world";                    |
|                        | if ($str =~ /hello/) {                      |
|                        |     print "Match found!\n";                 |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Case Insensitive Match | Use `i` modifier for case-insensitive match.|
|                        |                                             |
|                        | if ($str =~ /HELLO/i) {                     |
|                        |     print "Match found!\n";                 |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Anchors                | Use `^` and `$` to match start/end of string|
|                        |                                             |
|                        | if ($str =~ /^hello/) {                     |
|                        |     print "Starts with hello\n";            |
|                        | }                                           |
|                        | if ($str =~ /world$/) {                     |
|                        |     print "Ends with world\n";              |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Quantifiers            | Use `*`, `+`, `?`, and `{}` for repetition. |
|                        |                                             |
|                        | my $text = "aaa";                           |
|                        | if ($text =~ /a{3}/) {                      |
|                        |     print "Exactly 3 a's\n";                |
|                        | }                                           |
|                        | if ($text =~ /a*/) {                        |
|                        |     print "0 or more a's\n";                |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Character Classes      | Use `[]` for character sets and `\d`, `\w`, |
|                        | `\s` for pre-defined sets.                  |
|                        |                                             |
|                        | if ($str =~ /[aeiou]/) {                    |
|                        |     print "Contains a vowel\n";             |
|                        | }                                           |
|                        | if ($str =~ /\d/) {                         |
|                        |     print "Contains a digit\n";             |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Negated Classes        | Use `[^]` for negated character sets.       |
|                        |                                             |
|                        | if ($str =~ /[^aeiou]/) {                   |
|                        |     print "Contains a non-vowel\n";         |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Alternation            | Use `|` for alternation (logical OR).       |
|                        |                                             |
|                        | if ($str =~ /hello|world/) {                |
|                        |     print "Contains hello or world\n";      |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Grouping               | Use `()` for grouping and capturing.        |
|                        |                                             |
|                        | if ($str =~ /(hello) (world)/) {            |
|                        |     print "First: $1, Second: $2\n";        |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Non-Capturing Groups   | Use `(?:)` for non-capturing groups.        |
|                        |                                             |
|                        | if ($str =~ /(?:hello) (world)/) {          |
|                        |     print "Second: $1\n";                   |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Lookahead              | Use `(?=...)` for positive lookahead.       |
|                        |                                             |
|                        | if ($str =~ /hello(?= world)/) {            |
|                        |     print "Followed by world\n";            |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Lookbehind             | Use `(?<=...)` for positive lookbehind.     |
|                        |                                             |
|                        | if ($str =~ /(?<=hello) world/) {           |
|                        |     print "Preceded by hello\n";            |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Substitution           | Use `s///` for search and replace.          |
|                        |                                             |
|                        | my $text = "hello world";                   |
|                        | $text =~ s/hello/hi/;                       |
|                        | print "$text\n"; # 'hi world'               |
+------------------------+---------------------------------------------+
| Global Replacement     | Use `g` modifier for global replacement.    |
|                        |                                             |
|                        | my $text = "hello hello world";             |
|                        | $text =~ s/hello/hi/g;                      |
|                        | print "$text\n"; # 'hi hi world'            |
+------------------------+---------------------------------------------+
| Transliteration        | Use `tr///` for character translation.      |
|                        |                                             |
|                        | my $text = "hello world";                   |
|                        | $text =~ tr/hw/HW/;                         |
|                        | print "$text\n"; # 'Hello World'            |
+------------------------+---------------------------------------------+
| Extended Patterns      | Use `x` modifier for extended patterns.     |
|                        |                                             |
|                        | my $regex = qr/                             |
|                        |     hello     # Match the word 'hello'      |
|                        |     \s+       # One or more whitespace chars|
|                        |     world     # Match the word 'world'      |
|                        | /x;                                         |
|                        | if ($str =~ $regex) {                       |
|                        |     print "Match found with extended        |
|                        |                             pattern!\n";    |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Named Capture Groups   | Use `(?<name>...)` for named capture groups.|
|                        |                                             |
|                        | if ($str =~ /(?<greeting>hello) (?          |
|                        |                <place>world)/) {            |
|                        |     print "Greeting: $+{greeting},          | 
|                        |            Place: $+{place}\n";             |                                |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Non-Greedy Quantifiers | Use `*?`, `+?`, `??`, `{min,max}?` for non- |
|                        | greedy matching.                            |
|                        |                                             |
|                        | my $html = "<b>bold</b><b>text</b>";        |
|                        | if ($html =~ /<b>(.*?)<\/b>/) {             |
|                        |     print "First bold text: $1\n";          |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Unicode Matching       | Use `\p{Property}` and `\P{Property}` for   |
|                        | Unicode property matching.                  |
|                        |                                             |
|                        | if ($str =~ /\p{Lu}/) {                     |
|                        |     print "Contains an uppercase letter\n"; |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Embedded Code          | Use `(?{ ... })` to embed Perl code within a|
|                        | regex.                                      |
|                        |                                             |
|                        | if ($str =~ /(\d+)(?(?{ $^N > 10 })(        |
|                        |                     ?<gt10>\d{2}))/) {      |
|                        |     print "Match found with embedded        |
|                        |                             code!\n";       |
|                        | }                                           |
+------------------------+---------------------------------------------+
| POSIX Character Classes| Use `[:class:]` within brackets for POSIX   |
|                        | character classes.                          |
|                        |                                             |
|                        | Posix:                                      |
|                        | [:alnum:] alphanumeric                      |
|                        | [:alpha:] alphabetic                        |
|                        | [:ascii:] any ASCII char                    |
|                        | [:blank:] whitespace [ \t]                  |
|                        | [:cntrl:] control characters                |
|                        | [:digit:] digits                            |
|                        | [:graph:] alphanum + punctuation            |
|                        | [:lower:] lowercase chars                   |
|                        | [:print:] alphanum, punct, space            |
|                        | [:punct:] punctuation                       |
|                        | [:space:] whitespace [\s\ck]                |
|                        | [:upper:] uppercase chars                   |
|                        | [:word:] alphanum + '_'                     |
|                        | [:xdigit:] hex digit                        |
|                        | [:^digit:] non-digit                        |
|                        |                                             |
|                        | if ($str =~ /[[:digit:]]/) {                |
|                        |     print "Contains a digit\n";             |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Recursive Patterns     | Use `(?R)` for recursive pattern matching.  |
|                        |                                             |
|                        | if ($str =~ /(\() (?R)? (\))/x) {           |
|                        |     print "Matched nested parentheses\n";   |
|                        | }                                           |
+------------------------+---------------------------------------------+

###########################################################################

# I/O input/output
+------------------------+---------------------------------------------+
| Concept                | Example and Description                     |
+------------------------+---------------------------------------------+
| Reading from STDIN     | Use `<STDIN>` to read input from the user.  |
|                        |                                             |
|                        | print "Enter your name: ";                  |
|                        | my $name = <STDIN>;                         |
|                        | chomp($name);                               |
|                        | print "Hello, $name!\n";                    |
+------------------------+---------------------------------------------+
| Writing to STDOUT      | Use `print` to write output to the console. |
|                        |                                             |
|                        | print "Hello, World!\n";                    |
+------------------------+---------------------------------------------+
| Reading a File         | Use `open`, `<FILEHANDLE>` to read a file.  |
|                        |                                             |
|                        | open(my $fh, '<', 'filename.txt')           |
|                        |     or die "Cannot open file: $!";          |
|                        | while (my $line = <$fh>) {                  |
|                        |     chomp($line);                           |
|                        |     print "$line\n";                        |
|                        | }                                           |
|                        | close($fh);                                 |
+------------------------+---------------------------------------------+
| Writing to a File      | Use `open`, `print` to write to a file.     |
|                        |                                             |
|                        | open(my $fh, '>', 'filename.txt')           |
|                        |     or die "Cannot open file: $!";          |
|                        | print $fh "Hello, File!\n";                 |
|                        | close($fh);                                 |
+------------------------+---------------------------------------------+
| Appending to a File    | Use `open`, `print` to append to a file.    |
|                        |                                             |
|                        | open(my $fh, '>>', 'filename.txt')          |
|                        |     or die "Cannot open file: $!";          |
|                        | print $fh "Appending this line.\n";         |
|                        | close($fh);                                 |
+------------------------+---------------------------------------------+
| Reading a File into    | Use `slurp` mode to read entire file into   |
| a Scalar               | a scalar variable.                          |
|                        |                                             |
|                        | open(my $fh, '<', 'filename.txt')           |
|                        |     or die "Cannot open file: $!";          |
|                        | local $/;                                   |
|                        | my $content = <$fh>;                        |
|                        | close($fh);                                 |
|                        | print $content;                             |
+------------------------+---------------------------------------------+
| Reading Command Output | Use backticks or `qx//` to capture command  |
|                        | output.                                     |
|                        |                                             |
|                        | my $output = `ls -l`;                       |
|                        | print $output;                              |
+------------------------+---------------------------------------------+
| Writing to STDERR      | Use `warn` or `print STDERR` to write to    |
|                        | STDERR.                                     |
|                        |                                             |
|                        | warn "This is a warning!\n";                |
|                        | print STDERR "This is an error message.\n"; |
+------------------------+---------------------------------------------+
| Redirecting STDOUT     | Use shell redirection to redirect STDOUT.   |
|                        |                                             |
|                        | perl script.pl > output.txt                 |
+------------------------+---------------------------------------------+
| Redirecting STDERR     | Use shell redirection to redirect STDERR.   |
|                        |                                             |
|                        | perl script.pl 2> error.log                 |
+------------------------+---------------------------------------------+
| Redirecting Both       | Use shell redirection to redirect both      |
| STDOUT and STDERR      | STDOUT and STDERR.                          |
|                        |                                             |
|                        | perl script.pl > output.txt 2>&1            |
+------------------------+---------------------------------------------+
| Reading from a File    | Use `<>` to read input from a file or       |
| or STDIN               | standard input.                             |
|                        |                                             |
|                        | while (<>) {                                |
|                        |     chomp;                                  |
|                        |     print "$_\n";                           |
|                        | }                                           |
+------------------------+---------------------------------------------+
| Printing Formatted     | Use `printf` for formatted output.          |
| Output                 |                                             |
|                        | my $number = 42;                            |
|                        | printf("Number: %d\n", $number);            |
+------------------------+---------------------------------------------+
| Reading Binary Files   | Use `binmode` to read binary files.         |
|                        |                                             |
|                        | open(my $fh, '<:raw', 'image.png')          |
|                        |     or die "Cannot open file: $!";          |
|                        | binmode($fh);                               |
|                        | while (read($fh, my $buffer, 1024)) {       |
|                        |     # Process binary data                   |
|                        | }                                           |
|                        | close($fh);                                 |
+------------------------+---------------------------------------------+
| Writing Binary Files   | Use `binmode` to write binary files.        |
|                        |                                             |
|                        | open(my $fh, '>:raw', 'output.bin')         |
|                        |     or die "Cannot open file: $!";          |
|                        | binmode($fh);                               |
|                        | print $fh $binary_data;                     |
|                        | close($fh);                                 |
+------------------------+---------------------------------------------+
  
###########################################################################

# system interaction
+-------------------------+---------------------------------------------+
| Concept                 | Example and Description                     |
+-------------------------+---------------------------------------------+
| Running Shell Commands  | Use backticks or `qx//` to run shell        |
|                         | commands and capture their output.          |
|                         |                                             |
|                         | my $output = `ls -l`;                       |
|                         | print $output;                              |
+-------------------------+---------------------------------------------+
| Using `system` Function | Use `system` to run shell commands and      |
|                         | capture their exit status.                  |
|                         |                                             |
|                         | my $status = system('ls -l');               |
|                         | print "Exit status: $status\n";             |
+-------------------------+---------------------------------------------+
| Running External Scripts| Use `exec` to replace the current process   |
|                         | with an external script.                    |
|                         |                                             |
|                         | exec('perl', 'script.pl');                  |
+-------------------------+---------------------------------------------+
| Capturing Exit Status   | Use `$?` to capture the exit status of the  |
|                         | last command run.                           |
|                         |                                             |
|                         | system('ls -l');                            |
|                         | print "Exit status: $?\n";                  |
+-------------------------+---------------------------------------------+
| Environment Variables   | Use `%ENV` to access environment variables. |
|                         |                                             |
|                         | print "PATH: $ENV{PATH}\n";                 |
|                         | $ENV{MY_VAR} = 'value';                     |
+-------------------------+---------------------------------------------+
| Changing Directory      | Use `chdir` to change the current directory.|
|                         |                                             |
|                         | chdir('/path/to/dir') or die "Cannot chdir: |
|                         | $!";                                        |
+-------------------------+---------------------------------------------+
| Creating Directories    | Use `mkdir` to create new directories.      |
|                         |                                             |
|                         | mkdir('new_dir', 0755) or die "Cannot mkdir:|
|                         | $!";                                        |
+-------------------------+---------------------------------------------+
| Removing Directories    | Use `rmdir` to remove empty directories.    |
|                         |                                             |
|                         | rmdir('old_dir') or die "Cannot rmdir: $!"; |
+-------------------------+---------------------------------------------+
| Removing Files          | Use `unlink` to delete files.               |
|                         |                                             |
|                         | unlink('file.txt') or warn "Cannot unlink:  |
|                         | $!";                                        |
+-------------------------+---------------------------------------------+
| Renaming Files          | Use `rename` to rename files.               |
|                         |                                             |
|                         | rename('old.txt', 'new.txt') or die "Cannot |
|                         | rename: $!";                                |
+-------------------------+---------------------------------------------+
| Changing Permissions    | Use `chmod` to change file permissions.     |
|                         |                                             |
|                         | chmod 0755, 'script.pl' or die "Cannot chmod:|
|                         | $!";                                        |
+-------------------------+---------------------------------------------+
| Changing Ownership      | Use `chown` to change file ownership.       |
|                         |                                             |
|                         | chown $uid, $gid, 'file.txt' or die "Cannot |
|                         | chown: $!";                                 |
+-------------------------+---------------------------------------------+
| Setting Umask           | Use `umask` to set the file mode creation   |
|                         | mask.                                       |
|                         |                                             |
|                         | my $old_umask = umask 0022;                 |
+-------------------------+---------------------------------------------+
| Reading System Info     | Use `uname` to read system information.     |
|                         |                                             |
|                         | my $sysinfo = `uname -a`;                   |
|                         | print $sysinfo;                             |
+-------------------------+---------------------------------------------+
| Forking Processes       | Use `fork` to create a new process.         |
|                         |                                             |
|                         | my $pid = fork();                           |
|                         | if ($pid == 0) {                            |
|                         |     # Child process                         |
|                         |     print "This is the child process\n";    |
|                         |     exit 0;                                 |
|                         | } else {                                    |
|                         |     # Parent process                        |
|                         |     print "This is the parent process\n";   |
|                         |     waitpid($pid, 0);                       |
|                         | }                                           |
+-------------------------+---------------------------------------------+
| Handling Signals        | Use `%SIG` to set up signal handlers.       |
|                         |                                             |
|                         | $SIG{INT} = sub {                           |
|                         |     print "Caught INT signal\n";            |
|                         |     exit 0;                                 |
|                         | };                                          |
|                         | while (1) {                                 |
|                         |     print "Running...\n";                   |
|                         |     sleep 1;                                |
|                         | }                                           |
+-------------------------+---------------------------------------------+
| Interacting with Files  | Use `stat`, `lstat` to get file information.|
|                         |                                             |
|                         | my ($dev, $ino, $mode, $nlink, $uid, $gid,  |
|                         | $rdev, $size, $atime, $mtime, $ctime,       |
|                         | $blksize, $blocks) = stat('file.txt');      |
|                         | print "File size: $size bytes\n";           |
+-------------------------+---------------------------------------------+

###########################################################################

# one-liners
+-----------------------------+------------------------------------------+
| Task                        | Perl One-Liner                           |
+-----------------------------+------------------------------------------+
| Print Lines Matching        | Print lines containing "pattern".        |
| Pattern                     |                                          |
|                             | perl -ne 'print if /pattern/' file.txt   |
+-----------------------------+------------------------------------------+
| Print Line Numbers          | Print line numbers containing "pattern". |
| Matching Pattern            |                                          |
|                             | perl -ne 'print "$. $_" if /pattern/'    |
|                             | file.txt                                 |
+-----------------------------+------------------------------------------+
| Print Lines Not Matching    | Print lines not containing "pattern".    |
| Pattern                     |                                          |
|                             | perl -ne 'print unless /pattern/'        |
|                             | file.txt                                 |
+-----------------------------+------------------------------------------+
| Replace Text                | Replace "old" with "new" in file and     |
|                             | print.                                   |
|                             | perl -pe 's/old/new/g' file.txt          |
+-----------------------------+------------------------------------------+
| Delete Lines Matching       | Delete lines containing "pattern".       |
| Pattern                     |                                          |
|                             | perl -ne 'print unless /pattern/'        |
|                             | file.txt                                 |
+-----------------------------+------------------------------------------+
| Count Lines                 | Count number of lines in file.           |
|                             |                                          |
|                             | perl -lne 'END { print $. }' file.txt    |
+-----------------------------+------------------------------------------+
| Count Matching Lines        | Count number of lines matching           |
|                             | "pattern".                               |
|                             |                                          |
|                             | perl -lne 'END { print $count }' -e      |
|                             | '$count++ if /pattern/' file.txt         |
+-----------------------------+------------------------------------------+
| Print File Backwards        | Print file in reverse line order.        |
|                             |                                          |
|                             | perl -e 'print reverse <>' file.txt      |
+-----------------------------+------------------------------------------+
| Print Only Unique Lines     | Print only unique lines in file.         |
|                             |                                          |
|                             | perl -ne '$seen{$_}++ || print'          |
|                             | file.txt                                 |
+-----------------------------+------------------------------------------+
| Print Duplicate Lines       | Print duplicate lines in file.           |
|                             |                                          |
|                             | perl -ne '$seen{$_}++ && print'          |
|                             | file.txt                                 |
+-----------------------------+------------------------------------------+
| Calculate Sum of Numbers    | Calculate sum of numbers in file.        |
|                             |                                          |
|                             | perl -lne '$sum += $_; END { print $sum  |
|                             | }' file.txt                              |
+-----------------------------+------------------------------------------+
| Calculate Average           | Calculate average of numbers in file.    |
|                             |                                          |
|                             | perl -lne '$sum += $_; $count++; END {   |
|                             | print $sum/$count }' file.txt            |
+-----------------------------+------------------------------------------+
| Print Random Line           | Print a random line from file.           |
|                             |                                          |
|                             | perl -ne 'rand($.) < 1 && ($line = $_);  |
|                             | END { print $line }' file.txt            |
+-----------------------------+------------------------------------------+
| Convert Tabs to Spaces      | Convert tabs to spaces in file and print.|
|                             |                                          |
|                             | perl -pe 's/\t/    /g' file.txt          |
+-----------------------------+------------------------------------------+
| Remove Blank Lines          | Remove blank lines from file and print.  |
|                             |                                          |
|                             | perl -ne 'print if /\S/' file.txt        |
+-----------------------------+------------------------------------------+
| Insert Line Numbers         | Insert line numbers before each line.    |
|                             |                                          |
|                             | perl -lne 'print "$. $_"' file.txt       |
+-----------------------------+------------------------------------------+
| Capitalize Words            | Capitalize the first letter of each word.|
|                             |                                          |
|                             | perl -pe 's/\b(\w)/\u$1/g' file.txt      |
+-----------------------------+------------------------------------------+
| Lowercase Words             | Convert all letters to lowercase.        |
|                             |                                          |
|                             | perl -pe '$_ = lc' file.txt              |
+-----------------------------+------------------------------------------+
| Uppercase Words             | Convert all letters to uppercase.        |
|                             |                                          |
|                             | perl -pe '$_ = uc' file.txt              |
+-----------------------------+------------------------------------------+
| Print Lines Between         | Print lines between "start" and "end".   |
| Patterns                    |                                          |
|                             | perl -ne 'print if /start/../end/'       |
|                             | file.txt                                 |
+-----------------------------+------------------------------------------+
| Remove Leading Whitespaces  | Remove leading whitespaces from each     |
|                             | line.                                    |
|                             |                                          |
|                             | perl -pe 's/^\s+//' file.txt             |
+-----------------------------+------------------------------------------+
| Remove Trailing Whitespaces | Remove trailing whitespaces from each    |
|                             | line.                                    |
|                             |                                          |
|                             | perl -pe 's/\s+$//' file.txt             |
+-----------------------------+------------------------------------------+
| Extract Emails              | Extract email addresses from file.       |
|                             |                                          |
|                             | perl -ne 'print "$1\n" if /(\S+\@\S+)/'  |
|                             | file.txt                                 |
+-----------------------------+------------------------------------------+
| Extract URLs                | Extract URLs from file.                  |
|                             |                                          |
|                             | perl -ne 'print "$1\n" if                | 
|                             |                      /(https?:\/\/\S+)/' |
|                             | file.txt                                 |
+-----------------------------+------------------------------------------+
| Print File Size             | Print size of each file in current       |
|                             | directory.                               |
|                             |                                          |
|                             | perl -e 'for(<*>){print "$_ - ", -s, "   |
|                             | bytes\n"}'                               |
+-----------------------------+------------------------------------------+
| Count Word Frequency        | Count frequency of each word in file.    |
|                             |                                          |
|                             | perl -lne '$count{$_}++ for /(\w+)/g;    |
|                             | END { foreach (keys %count) { print "$_  |
|                             | = $count{$_}" } }' file.txt              |
+-----------------------------+------------------------------------------+
| Find Files Larger Than      | Find files larger than a specified size  |
| Specified Size              | in current directory.                    |
|                             |                                          |
|                             | perl -e 'for(<*>){print "$_ - ", -s, "   |
|                             | bytes\n" if -s > 1024}'                  |
+-----------------------------+------------------------------------------+
| Split File by Blank Lines   | Split file into segments divided by      |
|                             | blank lines.                             |
|                             |                                          |
|                             | perl -00 -ne 'print                      |
|                             |              "Segment:\n$_\n---\n"'      |
|                             | file.txt                                 |
+-----------------------------+------------------------------------------+
| Find and Replace in Place   | Find and replace text in file in place   |
|                             | (modify original file).                  |
|                             |                                          |
|                             | perl -pi -e 's/old/new/g' file.txt       |
+-----------------------------+------------------------------------------+
| Sort File Contents          | Sort lines in file alphabetically.       |
|                             |                                          |
|                             | perl -e 'print sort <>' file.txt         |
+-----------------------------+------------------------------------------+
| Extract Lines Matching      | Extract lines matching regex and print.  |
| Regex                       |                                          |
|                             | perl -ne 'print if /regex/' file.txt     |
+-----------------------------+------------------------------------------+
| Insert Text After Pattern   | Insert text after lines matching pattern.|
|                             |                                          |
|                             | perl -pe 's/pattern/$&\ninserted text/'  |
|                             | file.txt                                 |
+-----------------------------+------------------------------------------+
| Remove Duplicate Lines      | Remove duplicate lines and print.        |
|                             |                                          |
|                             | perl -ne 'print unless $seen{$_}++'      |
|                             | file.txt                                 |
+-----------------------------+------------------------------------------+
| Extract Substring           | Extract and print substring matching     |
|                             | regex                                    |
|                             |                                          |
|                             | perl -ne 'print "$1\n" if /(regex)/'     |
|                             | file.txt                                 |
+-----------------------------+------------------------------------------+
| Count Occurrences of Word   | Count occurrences of a specific word in  |
|                             | file.                                    |
|                             |                                          |
|                             | perl -lne '$count++ if /\bword\b/; END { |
|                             | print $count }' file.txt                 |
+-----------------------------+------------------------------------------+
| Find Longest Line           | Find and print the longest line in file. |
|                             |                                          |
|                             | perl -lne 'chomp; $max = length($_)      |
|                             |                          > $max ?        |
|                             | $_ : $max; END { print $max }' file.txt  |
+-----------------------------+------------------------------------------+
| Add Suffix to Each Line     | Append a suffix to each line and print.  |
|                             |                                          |
|                             | perl -pe 's/$/suffix/' file.txt          |
+-----------------------------+------------------------------------------+
| Number and Print Paragraphs | Number paragraphs (separated by blank    |
|                             | lines) and print.                        |
|                             |                                          |
|                             | perl -00 -ne '$count++; print "Paragraph |
|                             | $count:\n$_\n---\n"' file.txt            |
+-----------------------------+------------------------------------------+

###########################################################################

# printf in perl
+--------------------------+--------------------------------------------+
| Concept                  | Example and Description                    |
+--------------------------+--------------------------------------------+
| Basic Usage              | Use `printf` for formatted output.         |
|                          |                                            |
|                          | my $number = 42;                           |
|                          | printf("Number: %d\n", $number);           |
+--------------------------+--------------------------------------------+
| String Formatting        | Format and print a string.                 |
|                          |                                            |
|                          | my $name = "Alice";                        |
|                          | printf("Hello, %s!\n", $name);             |
+--------------------------+--------------------------------------------+
| Floating-Point Numbers   | Format and print floating-point numbers.   |
|                          |                                            |
|                          | my $pi = 3.14159;                          |
|                          | printf("Pi: %.2f\n", $pi);                 |
+--------------------------+--------------------------------------------+
| Padding with Spaces      | Pad output with spaces.                    |
|                          |                                            |
|                          | my $value = 123;                           |
|                          | printf("Value: %10d\n", $value);           |
+--------------------------+--------------------------------------------+
| Left-Justify Text        | Left-justify text with padding.            |
|                          |                                            |
|                          | my $text = "left";                         |
|                          | printf("Text: %-10s\n", $text);            |
+--------------------------+--------------------------------------------+
| Zero-Padding Numbers     | Pad numbers with leading zeros.            |
|                          |                                            |
|                          | my $number = 5;                            |
|                          | printf("Number: %03d\n", $number);         |
+--------------------------+--------------------------------------------+
| Multiple Format Specifiers | Use multiple format specifiers.          |
|                          |                                            |
|                          | my $str = "Perl";                          |
|                          | my $num = 100;                             |
|                          | printf("%s: %d%% complete\n", $str, $num); |
+--------------------------+--------------------------------------------+
| Scientific Notation      | Format and print numbers in scientific     |
|                          | notation.                                  |
|                          |                                            |
|                          | my $large_num = 123456789;                 |
|                          | printf("Scientific: %.2e\n", $large_num);  |
+--------------------------+--------------------------------------------+
| Octal and Hexadecimal    | Format and print numbers in octal and      |
|                          | hexadecimal.                               |
|                          |                                            |
|                          | my $num = 255;                             |
|                          | printf("Octal: %o\n", $num);               |
|                          | printf("Hex: %x\n", $num);                 |
+--------------------------+--------------------------------------------+
| Printing References      | Print the memory address of a reference.   |
|                          |                                            |
|                          | my $ref = \@array;                         |
|                          | printf("Reference: %p\n", $ref);           |
+--------------------------+--------------------------------------------+
| Custom Field Width       | Specify custom field width dynamically.    |
|                          |                                            |
|                          | my $width = 10;                            |
|                          | my $val = 123;                             |
|                          | printf("%*d\n", $width, $val);             |
+--------------------------+--------------------------------------------+
| Custom Precision         | Specify custom precision dynamically.      |
|                          |                                            |
|                          | my $precision = 2;                         |
|                          | my $pi = 3.14159;                          |
|                          | printf("%.*f\n", $precision, $pi);         |
+--------------------------+--------------------------------------------+
| Percent Literal          | Print a literal percent sign.              |
|                          |                                            |
|                          | my $percent = 50;                          |
|                          | printf("Progress: %d%%\n", $percent);      |
+--------------------------+--------------------------------------------+
| Using Array with printf  | Pass an array to `printf` for formatting.  |
|                          |                                            |
|                          | my @data = ("Alice", 25);                  |
|                          | printf("Name: %s, Age: %d\n", @data);      |
+--------------------------+--------------------------------------------+
| Formatting Booleans      | Print boolean values as true or false.     |
|                          |                                            |
|                          | my $bool = 1;                              |
|                          | printf("Boolean: %s\n", $bool ?            |
|                          |        "true" : "false");                  |
|                          |                                            |
+--------------------------+--------------------------------------------+
| Aligning Columns         | Align text in columns for table formatting.|
|                          |                                            |
|                          | printf("%-10s %10s\n", "Name", "Score");   |
|                          | printf("%-10s %10d\n", "Alice", 95);       |
|                          | printf("%-10s %10d\n", "Bob", 87);         |
+--------------------------+--------------------------------------------+
| Formatting Dates         | Print formatted date and time.             |
|                          |                                            |
|                          | use POSIX qw(strftime);                    |
|                          | my $date = strftime("%Y-%m-%d %H:%M:%S",   |
|                          | localtime);                                |
|                          | printf("Current date and time: %s\n",      |
|                          |                                $date);     |
|                          |                                            |
+--------------------------+--------------------------------------------+
| Hex Dump                 | Print data in a hex dump format.           |
|                          |                                            |
|                          | my $data = "Hello, World!";                |
|                          | printf("%v02X\n", $data);                  |
+--------------------------+--------------------------------------------+
| Centering Text           | Center text within a field.                |
|                          |                                            |
|                          | my $text = "center";                       |
|                          | my $width = 20;                            |
|                          | printf("%*s\n", ($width+length($text))/2,  |
|                          |                  $text);                   |
|                          |                                            |
+--------------------------+--------------------------------------------+
| Uppercase Strings        | Print strings in uppercase.                |
|                          |                                            |
|                          | my $text = "uppercase";                    |
|                          | printf("%s\n", uc($text));                 |
+--------------------------+--------------------------------------------+
| Lowercase Strings        | Print strings in lowercase.                |
|                          |                                            |
|                          | my $text = "LOWERCASE";                    |
|                          | printf("%s\n", lc($text));                 |
+--------------------------+--------------------------------------------+
| Title Case Strings       | Print strings in title case.               |
|                          |                                            |
|                          | my $text = "title case";                   |
|                          | $text =~ s/(\w+)/\u\L$1/g;                 |
|                          | printf("%s\n", $text);                     |
+--------------------------+--------------------------------------------+
| Formatting Currency      | Print numbers as currency.                 |
|                          |                                            |
|                          | my $amount = 1234.56;                      |
|                          | printf("\$%.2f\n", $amount);               |
+--------------------------+--------------------------------------------+
| Tabular Data             | Print data in a tabular format.            |
|                          |                                            |
|                          | my @header = ("Name", "Age", "City");      |
|                          | my @row1 = ("Alice", 30, "New York");      |
|                          | my @row2 = ("Bob", 25, "Los Angeles");     |
|                          | printf("%-10s %-5s %-15s\n", @header);     |
|                          | printf("%-10s %-5d %-15s\n", @row1);       |
|                          | printf("%-10s %-5d %-15s\n", @row2);       |
+--------------------------+--------------------------------------------+
#########################################################################
## Bundled with core
+--------------------+--------------------------------------------------+
| Module Name        | Description                                      |
+--------------------+--------------------------------------------------+
| AnyDBM_File        | Unified DBM interface (ties hashes)              |
| Attribute::Handlers| Define attribute handlers (experimental)         |
| AutoLoader         | Load subs on demand                              |
| AutoSplit          | Split module into autoloadable files             |
| B                  | Compiler backend interface                       |
| B::Asmdata         | Data for B assembler (internal)                  |
| B::Assembler       | Assemble Perl bytecode (internal)                |
| B::Bblock          | Basic block analysis for B (internal)            |
| B::Bytecode        | Bytecode compiler backend (internal)             |
| B::C               | C code generator for Perl (internal)             |
| B::CC              | Optimized C compiler backend (internal)          |
| B::Debug           | Debug info for B compiler (internal)             |
| B::Deparse         | Convert Perl bytecode to source                  |
| B::Disassembler    | Disassemble Perl bytecode (internal)             |
| B::Lint            | Syntax checker for Perl (internal)               |
| B::Showlex         | Show lexical variables in B (internal)           |
| B::Stackobj        | Stack object helper for B (internal)             |
| B::Terse           | Terse B compiler output (internal)               |
| B::Xref            | Cross-reference generator for B (internal)       |
| Benchmark          | Performance timing and comparison                |
| ByteLoader         | Load bytecode files                              |
| Carp               | Better error reporting (croak, confess)          |
| CGI                | CGI script utilities                             |
| CGI::Carp          | CGI-friendly error reporting                     |
| CGI::Cookie        | Manage HTTP cookies in CGI                       |
| CGI::Push          | Server push for CGI (rarely used)                |
| CPAN               | CPAN module installer interface                  |
| CPAN::FirstTime    | CPAN initial config helper                       |
| CPAN::Nox          | CPAN without XS module support                   |
| Cwd                | Get current working directory                    |
| DB_File            | Berkeley DB interface                            |
| Data::Dumper       | Serialize Perl data to string                    |
| Devel::DProf       | Profile Perl code execution                      |
| Devel::SelfStubber | Generate stubbed module code                     |
| Digest::MD5        | MD5 hashing function                             |
| Digest::SHA1       | SHA-1 hashing function                           |
| DirHandle          | Directory handle object                          |
| Dumpvalue          | Dump Perl variable contents                      |
| DynaLoader         | Dynamic module loading (internal)                |
| English            | English names for punctuation vars               |
| Env                | Access environment variables                     |
| Errno              | System errno constants                           |
| Exporter           | Export functions and variables                   |
| ExtUtils::Command  | Utilities for MakeMaker commands                 |
| ExtUtils::Embed    | Embed Perl in C programs                         |
| ExtUtils::Install  | Install Perl module files                        |
| ExtUtils::Installed| List installed modules                           |
| ExtUtils::Liblist  | Library list for MakeMaker                       |
| ExtUtils::MM_Cygwin| MakeMaker for Cygwin                             |
| ExtUtils::MM_OS2   | MakeMaker for OS/2                               |
| ExtUtils::MM_Unix  | MakeMaker for Unix                               |
| ExtUtils::MM_VMS   | MakeMaker for VMS                                |
| ExtUtils::MM_Win32 | MakeMaker for Win32                              |
| ExtUtils::MakeMaker| Generate Makefiles for modules                   |
| ExtUtils::Manifest | Manage MANIFEST files                            |
| ExtUtils::Miniperl | Generate miniperl executable                     |
| ExtUtils::         |                                                  |
|        Mkbootstrap | Create bootstrap files                           |
| ExtUtils::         |                                                  | 
|         Mksymlists | Create linker symbol lists                       |
| ExtUtils::Packlist | Manage .packlist files                           |
| ExtUtils::testlib  | Test module lib paths                            |
| Fcntl              | File control constants                           |
| File::Basename     | Parse file paths into dir/file                   |
| File::CheckTree    | Validate directory trees                         |
| File::Compare      | Compare files or filehandles                     |
| File::Copy         | Copy/move files                                  |
| File::DosGlob      | DOS-style globbing (Windows)                     |
| File::Find         | Traverse directory trees                         |
| File::Path         | Create/remove directory trees                    |
| File::Spec         | Portable file path handling                      |
| File::Spec::       |                                                  |
|        Functions   | File::Spec utility functions                     |
| File::Spec::Mac    | File::Spec for MacOS                             |
| File::Spec::OS2    | File::Spec for OS/2                              |
| File::Spec::Unix   | File::Spec for Unix                              |
| File::Spec::VMS    | File::Spec for VMS                               |
| File::Spec::Win32  | File::Spec for Win32                             |
| File::Temp         | Safe temporary file creation                     |
| FileHandle         | Filehandle object interface                      |
| FindBin            | Locate script’s directory                        |
| GDBM_File          | GDBM database interface                          |
| Getopt::Long       | Parse command-line options                       |
| Getopt::Std        | Parse simple command-line options                |
| I18N::Collate      | Collation for Unicode (deprecated)               |
| IO                 | Load IO modules (umbrella)                       |
| IO::Dir            | Directory I/O object                             |
| IO::File           | File I/O object                                  |
| IO::Handle         | Base I/O handle class                            |
| IO::Pipe           | Pipe I/O object                                  |
| IO::Poll           | Poll-based I/O multiplexing                      |
| IO::Seekable       | Seekable I/O base class                          |
| IO::Select         | Select-based I/O multiplexing                    |
| IO::Socket         | Socket I/O object                                |
| IO::Socket::INET   | Internet socket I/O                              |
| IO::Socket::UNIX   | Unix domain socket I/O                           |
| IPC::Msg           | System V message queue IPC                       |
| IPC::Open2         | Open process with two-way pipe                   |
| IPC::Open3         | Open process with three-way pipe                 |
| IPC::Semaphore     | System V semaphore IPC                           |
| IPC::SysV          | System V IPC constants                           |
| Math::BigFloat     | Arbitrary precision floating-point               |
| Math::BigInt       | Arbitrary precision integers                     |
| Math::Complex      | Complex number math                              |
| Math::Trig         | Trigonometric functions                          |
| NDBM_File          | NDBM database interface                          |
| Net::Cmd           | Base for network commands                        |
| Net::FTP           | FTP client                                       |
| Net::NNTP          | NNTP client (news)                               |
| Net::POP3          | POP3 client (email)                              |
| Net::SMTP          | SMTP client (email)                              |
| Net::Time          | Network time client                              |
| O                  | Generic compiler interface                       |
| ODBM_File          | ODBM database interface                          |
| Opcode             | Control Perl opcodes (security)                  |
| POSIX              | POSIX interface (system calls)                   |
| Pod::Checker       | Check POD syntax                                 |
| Pod::Find          | Find POD files                                   |
| Pod::Functions     | POD function descriptions                        |
| Pod::Html          | Convert POD to HTML                              |
| Pod::InputObjects  | POD input object model                           |
| Pod::Man           | Convert POD to man pages                         |
| Pod::ParseUtils    | POD parsing utilities                            |
| Pod::Parser        | Base POD parser                                  |
| Pod::Plainer       | Simplify POD output                              |
| Pod::Select        | Select POD sections                              |
| Pod::Text          | Convert POD to plain text                        |
| Pod::Usage         | Extract usage from POD                           |
| SDBM_File          | SDBM database interface                          |
| Safe               | Restricted Perl execution                        |
| Search::Dict       | Binary search in sorted files                    |
| SelectSaver        | Save/restore selected filehandle                 |
| SelfLoader         | Load subs on demand (alternative)                |
| Shell              | Run shell commands (basic)                       |
| Socket             | Socket functions (inet_aton, etc.)               |
| Storable           | Serialize Perl data structures                   |
| Symbol             | Generate anonymous globs                         |
| Sys::Hostname      | Get hostname                                     |
| Sys::Syslog        | System logging interface                         |
| Term::Cap          | Terminal capability interface                    |
| Term::Complete     | Word completion for prompts                      |
| Term::ReadLine     | Readline interface (stub)                        |
| Test               | Simple test framework                            |
| Test::Harness      | Run Perl test scripts                            |
| Text::Abbrev       | Generate abbreviations                           |
| Text::ParseWords   | Parse text into words                            |
| Text::Soundex      | Soundex algorithm for names                      |
| Text::Tabs         | Expand/collapse tabs                             |
| Text::Wrap         | Wrap text into paragraphs                        |
| Tie::Array         | Tie arrays to custom storage                     |
| Tie::Handle        | Tie filehandles to custom storage                |
| Tie::Hash          | Tie hashes to custom storage                     |
| Tie::RefHash       | Tie hashes with reference keys                   |
| Tie::Scalar        | Tie scalars to custom storage                    |
| Tie::SubstrHash    | Fixed-size hash with substring keys              |
| Time::Local        | Convert time to/from epoch seconds               |
| Time::gmtime       | GMT time functions                               |
| Time::localtime    | Local time functions                             |
| Time::tm           | Internal time struct (helper)                    |
| UNIVERSAL          | Base class for all objects                       |
| User::grent        | Group entry object                               |
| User::pwent        | Password entry object                            |
| VMS::DCLsym        | VMS DCL symbol access                            |
| VMS::Filespec      | VMS file path utilities                          |
| VMS::Stdio         | VMS stdio extensions                             |
| XSLoader           | Simplified XS loading                            |
| attributes         | Attribute handling (internal)                    |
| base               | Base class importer                              |
| bigrat             | Rational number math (big)                       |
| blib               | Use uninstalled module dirs                      |
| bytes              | Force byte semantics                             |
| constant           | Define constants                                 |
| fields             | Compile-time field declaration                   |
| integer            | Force integer semantics                          |
| less               | Request less resource usage (stub)               |
| lib                | Manipulate @INC at compile time                  |
| locale             | Enable POSIX locale support                      |
| ops                | Restrict Perl operations                         |
| overload           | Operator overloading                             |
| re                 | Regular expression pragmas                       |
| strict             | Enforce strict coding rules                      |
| vars               | Predeclare variables                             |
| vmsish             | VMS-specific pragmas                             |
| warnings           | Enable warning controls                          |
+--------------------+--------------------------------------------------+
