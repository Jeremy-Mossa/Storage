###################################################################
# typed Variables

| Variable Type | Description                                 |
|---------------|---------------------------------------------|
| declare -i    | Integer. Variables are treated as integers. |
| declare -r    | Read-only. Variable value cannot be changed |
|               | after setting.                              |
| declare -a    | Array. Creates an indexed array.            |
| declare -A    | Associative array. Creates a hash map.      |
| declare -x    | Export. Makes the variable available to     |
|               | sub-processes.                              |
| declare -l    | Converts to lowercase upon assignment.      |
| declare -u    | Converts to uppercase upon assignment.      |
| declare -n    | Name reference to another variable.         |
| declare -p    | Print attributes and value of the variable. |
| declare -f    | Function. Displays  function's definition.  |
| declare -F    | Displays the function's name and attributes.|

###################################################################



###################################################################
# how to use let

| Operation              | Description                           |
|------------------------|---------------------------------------|
| let var=expression     | Evaluate expression, assign it to var |
| Example                | let result=5+3                        |
| Output                 | result is 8                           |
|                        |                                       |
|------------------------|---------------------------------------|
| let "var=expression"   | Expression can be a string in quotes  |
| Example                | let "result=5+3"                      |
| Output                 | result is 8                           |
|                        |                                       |
|------------------------|---------------------------------------|
| let "var = expression" | Spaces around = are allowed in quotes |
| Example                | let "result = 5 + 3"                  |
| Output                 | result is 8                           |
|                        |                                       |
|------------------------|---------------------------------------|
| let var++              | Increment var by 1                    |
| Example                | let count++                           |
| Output                 | count incremented by 1                |
|                        |                                       |
|------------------------|---------------------------------------|
| let var--              | Decrement var by 1                    |
| Example                | let count--                           |
| Output                 | count decremented by 1                |
|                        |                                       |
|------------------------|---------------------------------------|
| let var+=value         | Add value to var                      |
| Example                | let result+=5                         |
| Output                 | result increased by 5                 |
|                        |                                       |
|------------------------|---------------------------------------|
| let var-=value         | Subtract value from var               |
| Example                | let result-=5                         |
| Output                 | result decreased by 5                 |
|                        |                                       |
|------------------------|---------------------------------------|
| let var*=value         | Multiply var by value                 |
| Example                | let result*=2                         |
| Output                 | result multiplied by 2                |
|                        |                                       |
|------------------------|---------------------------------------|
| let var/=value         | Divide var by value                   |
| Example                | let result/=2                         |
| Output                 | result divided by 2                   |
|                        |                                       |
|------------------------|---------------------------------------|
| let var%=value         | Assign remainder of var/value to var  |
| Example                | let result%=3                         |
| Output                 | result assigned remainder             |
|                        |                                       |
|------------------------|---------------------------------------|
| let var=value1+value2  | Addition                              |
| Example                | let result=5+3                        |
| Output                 | result is 8                           |
|                        |                                       |
|------------------------|---------------------------------------|
| let var=value1-value2  | Subtraction                           |
| Example                | let result=5-3                        |
| Output                 | result is 2                           |
|                        |                                       |
|------------------------|---------------------------------------|
| let var=value1*value2  | Multiplication                        |
| Example                | let result=5*3                        |
| Output                 | result is 15                          |
|                        |                                       |
|------------------------|---------------------------------------|
| let var=value1/value2  | Division                              |
| Example                | let result=10/2                       |
| Output                 | result is 5                           |
|                        |                                       |
|------------------------|---------------------------------------|
| let var=value1%value2  | Modulus (remainder)                   |
| Example                | let result=10%3                       |
| Output                 | result is 1                           |
|                        |                                       |
|------------------------|---------------------------------------|
| let var=value1<<value2 | Left shift                            |
| Example                | let result=2<<3                       |
| Output                 | result is 16                          |
|                        |                                       |
|------------------------|---------------------------------------|
| let var=value1>>value2 | Right shift                           |
| Example                | let result=16>>2                      |
| Output                 | result is 4                           |
|                        |                                       |
|------------------------|---------------------------------------|
| let var=value1&value2  | Bitwise AND                           |
| Example                | let result=5&3                        |
| Output                 | result is 1                           |
|                        |                                       |
|------------------------|---------------------------------------|
| let var=value1|value2  | Bitwise OR                            |
| Example                | let result=5|3                        |
| Output                 | result is 7                           |
|                        |                                       |
|------------------------|---------------------------------------|
| let var=value1^value2  | Bitwise XOR                           |
| Example                | let result=5^3                        |
| Output                 | result is 6                           |
|                        |                                       |
|------------------------|---------------------------------------|
| let var=~value         | Bitwise NOT                           |
| Example                | let result=~5                         |
| Output                 | result is -6                          |
|                        |                                       |
|------------------------|---------------------------------------|
| let !value             | Logical NOT                           |
| Example                | let result=!0                         |
| Output                 | result is 1                           |
|                        |                                       |
|------------------------|---------------------------------------|
| let "var=condition"    | Logical expressions                   |
|                        |   using >, <, >=, <=, ==, !=          |
| Example                | let "result=5>3"                      |
| Output                 | result is 1 (true)                    |
|                        |                                       |
|------------------------|---------------------------------------|

###################################################################



###################################################################
# array operations

| Operation             | Description                          |
|-----------------------|--------------------------------------|
| array=(val1 val2 ...) | Define an indexed array              |
| array+=(v3 v4 ...)    | Append values to end of array        |
| array[index]=value    | Assign a value to an array element   |
| ${array[index]}       | Retrieve an array element            |
| ${array[@]}           | Retrieve all elements                |
| ${#array[@]}          | Retrieve the length of the array     |
| ${!array[@]}          | Retrieve the indices of the array    |
| unset array[index]    | Remove an element from the array     |
| declare -A a_array    | Declare an associative array         |
| a_array[key]=value    | Assign value to assoc. array element |
| array=()              | Empty an array                       |

###################################################################



###################################################################
# arithmetic operators

| Op      | Description                     |
--------------------------------------------|
| ++      | increment by one pre and postfix|
| --      | as above but decrement          |
| +-*/    | add ... divide by and truncate  |
| %       | modulo remainder                |
| **      | exponentiation                  |
| <<      | bit-shift left                  |
| >>      | bit-shift right                 |
| &       | bitwise and                     |
| |       | bitwise or                      |
| ~       | bitwise not                     |
| !       | logical not                     |
| ^       | bitwise exlusive or, xor        |
| ((...)) | evaluation                      |
| ,       | sequential evaluation           |
 
###################################################################



###################################################################
# Parameter expansion and string manipulations

| Parameter Expansion   | Description                            | 
|-----------------------|-----------------------------------------
| ${parameter}          | Expands to `parameter`.                |
| ${param:-word}        | `word` if `parameter` is unset or null,| 
|                       | else `parameter`.                      |
| ${param:=word}        | `word` if `parameter` is unset or null;|
|                       | assigns `word` to                      |
|                       | `parameter`.                           |
| ${param:?word}        | Prints `word` and exits if `param` is  |
|                       | unset or null,                         |
|                       | else `param`.                          |
| ${param:+word}        | `word` if `param` is set and not null, |
|                       | else nothing.                          |
| ${#param}             | Length of `param`.                     |
| ${param:offset}       | Substr of `param` starting at `offset`.|
| ${param:offset:length}| Substr of `param` starting at `offset` |
|                       | with `length`.                         |
| ${param#pattern}      | Removes shortest match of `pattern`    |
|                       | from start of `param`.                 |
| ${param##pattern}     | Removes longest match of `pattern`     |
|                       | from start of `param`.                 |
| ${param%pattern}      | Removes shortest match of `pattern`    |
|                       | from end of `param`.                   |
| ${param%%pattern}     | Removes longest match of `pattern`     |
|                       | from end of `param`.                   |
| ${param/pattern/str}  | Replaces first match of `pattern` with |
|                       | `str` in `param`.                      |
| ${param//pattern/str} | Replace every `pattern` with `str`.    |

###################################################################



###################################################################
# file test operators

| Operator        | Description                                  |
|-----------------|----------------------------------------------|
| -e file         | True if `file` exists.                       |
| -f file         | True if `file` is a regular file.            |
| -d file         | True if `file` is a directory.               |
| -h file         | True if `file` is a symbolic link.           |
| -r file         | True if `file` is readable.                  |
| -w file         | True if `file` is writable.                  |
| -x file         | True if `file` is executable.                |
| -s file         | True if `file` has a size greater than zero. |
| -nt file1 file2 | True if `file1` is newer than `file2`.       |
| -ot file1 file2 | True if `file1` is older than `file2`.       |

###################################################################



###################################################################
# special variables for scripts

| Variable       | Description                                   |
|----------------|-----------------------------------------------|
| $0             | name of the script being executed.            |
| $1, $2, ... $N | positional parameters, passed to the script.  |
| $#             | number of positional parameters.              |
| $*             | All positional parameters (as a single word). |
| $@             | All  positional parameters as separate words  |
| $?             | exit status of the last command executed.     |
| $$             | process ID of the current shell.              |
| $!             | process ID of the last background command.    |
| $-             | current options set for the shell.            |
| $_             | last argument of the previous command.        |

###################################################################



###################################################################
# conditional expressions

| Expression| Description               |
|-----------|---------------------------|
| -eq       | Equal to                  |
| -ne       | Not equal to              |
| -lt       | Less than                 |
| -le       | Less than or equal to     |
| -gt       | Greater than              |
| -ge       | Greater than or equal to  |
| &&        | Logical AND               |
| ||        | Logical OR                |
| !         | Logical NOT               |

###################################################################



###################################################################
# exit status codes

| Exit Code | Description                       |
|-----------|-----------------------------------|
| 0         | Success                           |
| 1         | General error                     |
| 2         | Misuse of shell builtins          |
| 126       | Command invoked cannot execute    |
| 127       | Command not found                 |
| 128       | Invalid exit argument             |
| 130       | Script terminated by Control-C    |
| 255*      | Exit status out of range          |

###################################################################



###################################################################
# signal names and numbers

| Signal   | Number | Description                      |
|----------|--------|----------------------------------|
| SIGHUP   | 1      | Hangup                           |
| SIGINT   | 2      | Interrupt from keyboard (Ctrl-C) |
| SIGQUIT  | 3      | Quit from keyboard               |
| SIGKILL  | 9      | Kill signal                      |
| SIGTERM  | 15     | Termination signal               |
| SIGSTOP  | 19     | Stop process                     |
| SIGCONT  | 18     | Continue if stopped              |

###################################################################



###################################################################
# How to use for loop
# Flow control for loop

#Print mulitples of 12 up to 144
for i in {1..144..12}; do
  echo $i
done

# One-liner to print alphabet
for char in {a..z}; do echo $char; done

# C-style print of integers 1-10
for ((i=1; i<=10; i++))
  do printf $i'\n'
done

# Infinite loop
for ((;;)); do
  echo "Press Ctrl-C to stop..."
  sleep 0.5
done

###################################################################



###################################################################
# How to use select
# Flow Control select

# Each ":" is replaced with a newline
dirs=${PATH//:/'\n'}

select path in $(echo -e $dirs); do
  #Checks if path is null
  if [ $path ]; then
    echo $path
    cd $path
    break
  else
    echo 'invalid selection'
  fi
done

# $SHELL at the end of the script
# allows the use of cd without
# the need to do 'source menu.sh'
# Just ./menu.sh
# But it starts a new shell
# $SHELL
#

PS3="Select an option: "
select option in "Option 1" "Option 2" "Option 3"; do
    case $option in
        "Option 1")
            echo "You selected Option 1"
            break
            ;;
        "Option 2")
            echo "You selected Option 2"
            break
            ;;
        "Option 3")
            echo "You selected Option 3"
            break
            ;;
        *)
            echo "Invalid option"
            ;;
    esac
done

###################################################################



####################################################################

# How to while loop
# Flow control while loop
# This scriptlet has no error handling
# And is only for showing while loops

declare -i product=1
declare -i i

read -p "Enter and integer greater than \
  zero: " i

while [ $i -gt 0 ]; do
  product=product*=i
  i=i-=1
done

echo $product
###################################################################



####################################################################
# how to use case
# flow control case

case "$1" in
    start)
        echo "Starting service..."
        ;;
    stop)
        echo "Stopping service..."
        ;;
    restart)
        echo "Restarting service..."
        ;;
    *)
        echo "Usage: $0 {start|stop|restart}"
        ;;
esac

####################################################################



####################################################################
# here document

cat << EOF
This is a multi-line
string that will be
used as input to the
`cat` command.
EOF

####################################################################



####################################################################
# getopts for argument parsing

while getopts ":a:b:" opt; do
    case $opt in
        a)
            echo "Option -a with argument: $OPTARG"
            ;;
        b)
            echo "Option -b with argument: $OPTARG"
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            ;;
        :)
            echo "Option -$OPTARG requires an argument" >&2
            ;;
    esac
done

####################################################################



####################################################################
# printf how to

| Format Specifier | Description                              |
|------------------|------------------------------------------|
| %b               | Print the argument with backslash escapes|
| Example          | printf "%b" "Hello\nWorld"               |
| Output           | Hello                                    |
|                  | World                                    |
|                  |                                          |
| %c               | Print the first character of the argument|
| Example          | printf "%c" "Hello"                      |
| Output           | H                                        |
|                  |                                          |
| %d, %i           | Print the argument as a signed number    |
| Example          | printf "%d" 42                           |
| Output           | 42                                       |
|                  |                                          |
| %e, %E           | Print the argument in scientific notation|
| Example          | printf "%e" 1234.5678                    |
| Output           | 1.234568e+03                             |
|                  |                                          |
| %f               | Print the argument as a floating-point   |
| Example          | printf "%f" 1234.5678                    |
| Output           | 1234.567800                              |
|                  |                                          |
| %g, %G           | Shortest representation of %e or %f      |
| Example          | printf "%g" 1234.5678                    |
| Output           | 1234.57                                  |
|                  |                                          |
| %o               | Print the argument as an octal number    |
| Example          | printf "%o" 42                           |
| Output           | 52                                       |
|                  |                                          |
| %s               | Print the argument as a string           |
| Example          | printf "%s" "Hello"                      |
| Output           | Hello                                    |
|                  |                                          |
| %u               | Print the argument as an unsigned number |
| Example          | printf "%u" 42                           |
| Output           | 42                                       |
|                  |                                          |
| %x, %X           | Print the argument as a hexadecimal      |
| Example          | printf "%x" 42                           |
| Output           | 2a                                       |
|                  |                                          |
| %%               | Print a literal % character              |
| Example          | printf "%%"                              |
| Output           | %                                        |
|                  |                                          |
--------------------------------------------------------------|
| Escape Sequence  | Description                              |
|------------------|------------------------------------------|
| \\               | Print a backslash                        |
| Example          | printf "\\"                              |
| Output           | \                                        |
|                  |                                          |
| \a               | Print an alert (bell)                    |
| Example          | printf "\a"                              |
| Output           | (bell sound)                             |
|                  |                                          |
| \b               | Print a backspace                        |
| Example          | printf "A\bB"                            |
| Output           | B                                        |
|                  |                                          |
| \c               | Suppress further output                  |
| Example          | printf "Hello\cWorld"                    |
| Output           | Hello                                    |
|                  |                                          |
| \f               | Print a form feed                        |
| Example          | printf "\f"                              |
| Output           | (form feed)                              |
|                  |                                          |
| \n               | Print a newline                          |
| Example          | printf "\n"                              |
| Output           | (newline)                                |
|                  |                                          |
| \r               | Print a carriage return                  |
| Example          | printf "Hello\rWorld"                    |
| Output           | World                                    |
|                  |                                          |
| \t               | Print a horizontal tab                   |
| Example          | printf "Hello\tWorld"                    |
| Output           | Hello    World                           |
|                  |                                          |
| \v               | Print a vertical tab                     |
| Example          | printf "Hello\vWorld"                    |
| Output           | Hello                                    |
|                  | World                                    |
|                  |                                          |
--------------------------------------------------------------|
| Flags            | Description                              |
|------------------|------------------------------------------|
| -                | Left-justify the output                  |
| Example          | printf "%-10s" "Hello"                   |
| Output           | Hello     (with 5 trailing spaces)       |
|                  |                                          |
| +                | Always print a sign (+ or -)             |
| Example          | printf "%+d" 42                          |
| Output           | +42                                      |
|                  |                                          |
| (space)          | Print a space before positive numbers    |
| Example          | printf "% d" 42                          |
| Output           |  42                                      |
|                  |                                          |
| 0                | Pad numbers with leading zeros           |
| Example          | printf "%010d" 42                        |
| Output           | 0000000042                               |
|                  |                                          |
| #                | Alternate form (e.g., 0x for hex,        |
                   | 0 for octal)                             |
| Example          | printf "%#x" 42                          |
| Output           | 0x2a                                     |
|                  |                                          |
--------------------------------------------------------------|
| Width and Precision | Description                           |
|---------------------|---------------------------------------|
| width               | Minimum number of characters          |
| Example             | printf "%10s" "Hello"                 |
| Output              |      Hello (with 5 leading spaces)    |
|                     |                                       |
| .precision          | Max characters for strings or digits  |
|                     | after decimal for numbers             |
| Example             | printf "%.3f" 1234.5678               |
| Output              | 1234.568                              |
|                     |                                       |
| Example             | printf "%10.3f" 1234.5678             |
| Output              |   1234.568 (with 3 leading spaces)    |
|                     |                                       |

###################################################################



###################################################################
# common bash builtins

| Command  | Description                                          |
|----------|------------------------------------------------------|
| bg       | Resume a suspended job in the background.            |
| bind     | Display or modify readline key and function bindings |
| break    | Exit from a loop.                                    |
| builtin  | Execute a shell built-in, bypassing funcs +aliases.  |
| command  | Run a command, ignoring shell functions.             |
| compgen  | Generate possible completion matches for a word.     |
| complete | Specify how arguments are to be completed.           |
| compopt  | Modify or display completion options.                |
| continue | Resume the next iteration of a loop.                 |
| declare  | Declare variables and give them attributes.          |
| dirs     | Display the list of currently remembered directories |
| disown   | Remove jobs from the current shell w\o terminating   |
| echo     | Display a line of text or variable value.            |
| enable   | Enable or disable shell built-ins.                   |
| eval     | Evaluate several commands/arguments.                 |
| exec     | Replace the shell with the specified command.        |
| exit     | Exit the shell with a status.                        |
| export   | Set an environment variable.                         |
| fc       | Fix command: edit the command history.               |
| fg       | Bring a background job to the foreground.            |
| getopts  | Parse positional parameters.                         |
| hash     | Remember or display program locations.               |
| help     | Display help for built-in commands.                  |
| history  | Show the command history.                            |
| jobs     | List active jobs.                                    |
| kill     | Send a signal to a process.                          |
| let      | Perform arithmetic on shell variables.               |
| local    | Declare a local variable in a function.              |
| logout   | Exit a login shell.                                  |
| popd     | Remove the top directory from the stack.             |
| printf   | Format and print data.                               |
| pushd    | Save and change the current directory.               |
| read     | Read a line of input.                                |
| readonly | Mark variables/functions as readonly.                |
| return   | Exit a function with a return status.                |
| set      | Set or unset shell options and positional parameters |
| shift    | Shift positional parameters.                         |
| shopt    | Set or unset shell options.                          |
| source   | Read + execute commands from a file in current shell |
| suspend  | Suspend the current shell.                           |
| test     | Evaluate a conditional expression.                   |
| times    | Display shell process times.                         |
| trap     | Run a command when signal is received by the script  |
| type     | Describe a command.                                  |
| ulimit   | Control resource limits for the shell.               |
| umask    | Set file creation mask.                              |
| unalias  | Remove an alias.                                     |
| unset    | Unset a shell variable or function.                  |
| wait     | Wait for a process to change state.                  |
| which    | Locate a command.                                    |

###################################################################



###################################################################
# environment variables

| Variable     | Description                                     |
|--------------|-------------------------------------------------|
| PATH         | List of directories to search for executable    |
|              |   commands                                      |
| HOME         | Path to the home directory of the current user  |
| USER         | Current logged-in user's username               |
| SHELL        | Path to the current user's shell                |
| PWD          | Current working directory                       |
| OLDPWD       | Previous working directory                      |
| LOGNAME      | Current user's login name                       |
| HOSTNAME     | Hostname of the system                          |
| MAIL         | Path to the current user's mail file            |
| PS1          | Primary command prompt string                   |
| PS2          | Secondary command prompt string                 |
| IFS          | Internal field separator                        |
| LANG         | Current language setting                        |
| LC_ALL       | Override all locale settings                    |
| HISTFILE     | Path to the history file                        |
| HISTSIZE     | Number of commands to remember in the command   |
|              |   history                                       |
| HISTFILESIZE | Number of lines the history file can contain    |
| TERM         | Terminal type                                   |
| EDITOR       | Default text editor                             |
| VISUAL       | Default visual editor                           |
| TMOUT        | Timeout value for the shell                     |
| UID          | User ID of the current user                     |
| GID          | Group ID of the current user                    |

#################################################################
